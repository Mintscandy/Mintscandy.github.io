<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>功能测试</title>
    <link href="/2024/02/23/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/02/23/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="功能测试用例"><a href="#功能测试用例" class="headerlink" title="功能测试用例"></a>功能测试用例</h1><p><strong>直接测试项目</strong><br>UI测试，首页按钮功能测试，排序，列表显示。<br><strong>可以直接复制粘贴</strong><br>资产类别&#x2F;品牌&#x2F;取得方式（新增、修改、启用、禁用）<br>⬆️资产管理员只需要（UI测试、排序、显示、首页按钮功能测试）<br><strong>需要修改部分条件</strong><br>资产入库、资产借还、资产转移、资产维修（需要稍微修改一下部分条件）<br><strong>需要查询测试</strong><br>超级管理员：供应商、存放地点<br>资产管理员：供应商、存放地点、人员管理、资产入库、资产借还、资产转移、资产维修、资产报废、资产盘点、资产申购<br><strong>需要翻页测试</strong><br>人员管理、资产借还、资产入库、资产转移、资产维修、资产报废<br>（记录大于10条要翻页）<br>翻页测试用例：</p><ol><li>列表页数据小于10条；查看翻页功能；不显示翻页</li><li>列表页数据大于10条；查看翻页功能；显示翻页功能，首页，页码，末页，&gt;，&lt;</li><li>大于10条；当前为第一页；首页无法点击，当前页码高亮显示</li><li>大于10条；当前为最后一页；末页无法点击，当前页码高亮显示</li><li>大于10条；当前不为第一页，点击&lt;；跳转到对应页面，页码高亮显示</li><li>大于10条；当前不为第一页，点击&gt;；跳转到对应页面，页码高亮显示</li><li>大于10条；当前不为首页，点击“首页”；跳转到对应首页，页码高亮显示</li><li>大于10条；当前不为末页，点击“末页”；跳转到对应末页，页码高亮显示</li><li>大于10条；点击页码；跳转到对应页面，页码高亮显示</li><li>大于10条；输入查询条件，点击翻页；翻页功能正常，查询条件保留</li></ol><p><strong>查看***详情</strong><br>供应商、存放地点<br>资产借还（查看借用单详情）<br>资产转移（查看转移单详情）<br>资产申购（查看申购单详情）</p>]]></content>
    
    
    <categories>
      
      <category>软测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹性盒布局</title>
    <link href="/2024/02/23/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80/"/>
    <url>/2024/02/23/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="弹性盒布局"><a href="#弹性盒布局" class="headerlink" title="弹性盒布局"></a>弹性盒布局</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>弹性盒布局又叫做 Flexible Box，通常被叫做为 flexbox，是一种一维的布局模型。<br>flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局  CSS Grid Layout，可以同时处理行和列上的布局。</p><h2 id="FlexBox-的两根轴线"><a href="#FlexBox-的两根轴线" class="headerlink" title="FlexBox 的两根轴线"></a>FlexBox 的两根轴线</h2><p>首先在 flex 布局中，我们有两根轴线——主轴和交叉轴，主轴是通过使用 flex-direction 定义的，另一根轴垂直于它。</p><h3 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h3><p>主轴取值有如下四个</p><ul><li><code>row</code></li><li><code>row-reverse</code></li><li><code>column</code></li><li><code>column-reverse</code><br>  如果是 <code>row</code> 或者 <code>row-reverse</code> 的时候，主轴将会沿着 inline 的方向延伸。<br>  如果是 <code>column</code> 或者 <code>column-reverse</code>的时候，主轴将会以上下方向延伸，也就是 block 排列的方向。</li></ul><h3 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h3><p>交叉轴是垂直于主轴的，flexbox 的特性是沿着主轴或者交叉轴对齐之中的元素。</p><h2 id="起始线和终止线"><a href="#起始线和终止线" class="headerlink" title="起始线和终止线"></a>起始线和终止线</h2><p>在过去 CSS 的书写模式主要被认为是水平的，从左到右。现代的布局方式涵盖了书写模式的范围，因为有些国家是从右往左书写的，<br>如果 <code>flex-direction</code> 是 <code>row</code> ，并且在书写英文的情况下，那么主轴的起始线是左边，终止线是右边。<br>如果书写阿拉伯文，则主轴的起始线为右边，终止线为左边。<br><br>在这两种情况下，交叉轴的起始线是 flex 容器的顶部，终止线是底部，因为这两种语言都是水平书写模式。</p><h2 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h2><p>文档中采用了 flexbox 的区域被称为 flex 容器。将容器的<code>display</code>属性改为<code>flex</code>或者<code>inline-flex</code>即可。默认的 flex 容器有如下属性。</p><ul><li>元素排列为一行，因为 flex-direction 属性初始值为 row。</li><li>元素从主轴的起始线开始。</li><li>元素不会在主维度方向拉伸，但是可以缩小。  <img src="/2024/02/23/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80-20240106143416555.png" class="" title="这是一张图片">  我们可以看上图，在上图中我们设置<code>container</code>的宽度为 800px，而子元素的宽度为 100px，可以看到并没有被拉伸。</li><li>元素会被拉伸来填充交叉轴的大小。</li><li><code>flex-basis</code>的属性为<code>auto</code> 。</li><li><code>flex-wrap</code> 属性为<code>nowrap</code> 。</li></ul><p>会让元素呈线性排列，并且将自己的大小作为主轴大小，如果元素超出容器，他将会溢出而不会换行。如果一些元素的高度比其他的元素高，则元素会沿交叉轴被拉伸来填满大小。</p><h2 id="用-flex-wrap-实现多行-Flex-容器"><a href="#用-flex-wrap-实现多行-Flex-容器" class="headerlink" title="用 flex-wrap 实现多行 Flex 容器"></a>用 flex-wrap 实现多行 Flex 容器</h2><p>虽然<code>flexbox</code>为一维模型，但我们可以使 flex 应用到多行，在这样做的时候，应该将每一行看作为一个新的<strong>flex 容器</strong>。任何空间分布都将会在该行上发生，而不影响改空间分布的其他行。<br><br>我们需要为<code>flex-wrap</code>属性添加一个属性值<code>wrap</code>。<br>设置完成后，这样你就会因为元素太多太大，而无法全部显示在一行，则会换行显示。当盒子的宽度<strong>不足以放下一个完整子元素</strong>的时候，将会换行。</p><h2 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h2><p>当然也可以将<code>flex-direction</code>和<code>flex-wrap</code>组合简写为一个属性<code>flex-flow</code> 第一个值为<code>flex-direction</code> 第二个值为 <code>flex-wrap</code></p><h2 id="flex-元素上的属性"><a href="#flex-元素上的属性" class="headerlink" title="flex 元素上的属性"></a>flex 元素上的属性</h2><p>为了更好的控制 flex 元素，有三个属性可以作用于他们：</p><ul><li><code>flex-grow</code></li><li>&#96;felx-shrink</li><li>&#96;flex-basis</li></ul><p>在此之前，我们需要了解<strong>可用空间</strong>这个概念，这些概念其实就是改变了 flex 容器中可用空间的行为。<br>假设，在 1 个 500px 的容器中，我们有 3 个 100px 宽的元素，那么这 3 个元素需要占用 300px 的宽，剩下的 200px 的可用空间。在默认情况下，flexbox 将会把这 200px 的空间留在最后一个元素的后面。<br><br>如果期望这些元素能够自动地扩展去填充满剩下的空间，那我们需要去控制可用空间在这几个元素之间如何分配，这就是元素上 flex 属性需要做的事情。</p><h2 id="Flex-元素属性：flex-basis"><a href="#Flex-元素属性：flex-basis" class="headerlink" title="Flex 元素属性：flex-basis"></a>Flex 元素属性：<code>flex-basis</code></h2><p><code>flex-basis</code>  定义了该元素的<strong>空间大小</strong>（<strong>the size of that item in terms of the space</strong>），flex 容器里除了元素所占的空间以外的富余空间就是<strong>可用空间</strong> available space。该属性的默认值是  <code>auto</code> 。此时，浏览器会检测这个元素是否具有确定的尺寸。在上面的例子中，所有元素都设定了宽度（width）为 100px，所以  <code>flex-basis</code>  的值为 100px。(也就是会自动覆盖 width)<br>如果没有给元素设定尺寸，<code>flex-basis</code>  的值采用元素内容的尺寸。这就解释了：我们给只要给 Flex 元素的父元素声明  <code>display: flex</code> ，所有子元素就会排成一行，且自动分配小大以充分展示元素的内容。</p><h2 id="Flex-元素：-flex-grow"><a href="#Flex-元素：-flex-grow" class="headerlink" title="Flex 元素：&#96;flex-grow"></a>Flex 元素：&#96;flex-grow</h2><p>可以简单理解为 Android 开发中 <code>layout_weight</code> 一致。<br><br><code>flex-grow</code>  若被赋值为一个正整数，flex 元素会以  <code>flex-basis</code>  为基础，沿<strong>主轴方向增长</strong>尺寸。这会使该元素延展，并占据此方向轴上的可用空间（available space）。如果有其他元素也被允许延展，那么他们会各自占据可用空间的一部分。</p><p>如果我们给上例中的所有元素设定  <code>flex-grow</code>  值为 1，容器中的可用空间会被这些元素<strong>平分</strong>。它们会延展以填满容器主轴方向上的空间。</p><p>flex-grow 属性可以按比例分配空间。如果第一个元素  <code>flex-grow</code>  值为 2，其他元素值为 1，则第一个元素将占有 2&#x2F;4（上例中，即为 200px 中的 100px）, 另外两个元素各占有 1&#x2F;4（各 50px）。</p><h2 id="Flex-元素：flex-shrink"><a href="#Flex-元素：flex-shrink" class="headerlink" title="Flex 元素：flex-shrink"></a>Flex 元素：<code>flex-shrink</code></h2><p>会以 <code>flex-basis</code> 为基础，沿着主轴方向收缩尺寸。会使得该元素收缩。<br>如果设置不同的容器大小，则会按照比例均分<code>flex-basis</code>。</p><p><code>flex-grow</code>属性是处理 flex 元素在主轴上增加空间的问题，相反<code>flex-shrink</code>属性是处理 flex 元素收缩的问题。如果我们的容器中没有足够排列 flex 元素的空间，那么可以把 flex 元素<code>flex-shrink</code>属性设置为正整数来缩小它所占空间到<code>flex-basis</code>以下。与<code>flex-grow</code>属性一样，可以赋予不同的值来控制 flex 元素收缩的程度——给<code>flex-shrink</code>属性赋予更大的数值可以比赋予小数值的同级元素收缩程度更大。</p><h2 id="元素之间的对齐和空间分配"><a href="#元素之间的对齐和空间分配" class="headerlink" title="元素之间的对齐和空间分配"></a>元素之间的对齐和空间分配</h2><p>FlexBox 的一个关键特性是能够设置 flex 元素沿主轴方向和交叉轴方向的对齐方式，以及他们之间的空间分配。</p><p><code>align-items</code><br>这个属性的初始值为 stretch，这就是为什么 flex 元素会默认被拉伸到最高元素的高度，实际上他们是被拉伸填满 flex 容器——最高的元素定义了容器的高度。它可以是如下值</p><ul><li><code>stretch</code> 默认值</li><li><code>flex-start</code> 使得 flex 元素按照 flex 容器的顶部对齐</li><li><code>flex-end</code> 使它们按 flex 容器的下部对齐</li><li><code>center</code> 是他们居中对齐</li></ul><p><code>justify-content</code><br>这个属性的初始值为 <code>flex-start</code> 元素从容器的起始线排列，设置为 <code>flex-end</code> 从终止线开始排列。或者选择 <code>center</code> ，在中间排列。<br>也可以将值设置为<code>space-between</code> ，将元素排列好后的剩余空间拿出来，平均分配到元素之间，使得元素之间的间隔相等。或者使用<code>space-around</code> 使得每个元素的左右空间相等。</p><ul><li><code>flex-grow</code>：该元素获得（伸张）多少正可用空间（positive free space）？</li><li><code>flex-shrink</code>：该元素要消除（收缩）多少负可用空间（negative free space）？</li><li><code>flex-basis</code>：在该元素未伸张和收缩之前，它的大小是多少？</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/23/hello-world/"/>
    <url>/2024/02/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
